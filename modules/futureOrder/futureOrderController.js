const express = require('express');
const router = express.Router();
const db = require('../../config/db');

//let invoiceCounter = 1;
//let currentMonth = new Date().getMonth() + 1;

/*function generateInvoiceNumber() {
   const today = new Date();
   const year = today.getFullYear();
   const month = today.getMonth() + 1;

   // Reset the counter if the current month has changed
   if (month !== currentMonth) {
       currentMonth = month;
       invoiceCounter = 1;
   }

   const date = String(today.getDate()).padStart(2, '0');
   const invoiceNumber = `INV${invoiceCounter}_${year}${month}${date}`;

   // Increment the counter for the next invoice
   invoiceCounter++;

   return invoiceNumber;
} */

router.post('/create_order', (req, res) => {

    const customer_details = req.body.customer;
    const order_details = req.body.order;

    // Check if the customer details are present and have a non-null number property
    if (!customer_details || typeof customer_details !== 'object' || !customer_details.number) {
        // console.error('Invalid customer details in the request payload:', req.body);
        return res.status(400).json({ error: 'Invalid customer details in the request payload' });
    }

    const customerNumber = customer_details.number; // Storing the number in another variable
    //console.log('Received customer details:', customer_details);

    // Check if the customer already exists 
    db.query('SELECT cust_id FROM customer WHERE number = ? LIMIT 1', [customerNumber], (err, results) => {

        if (err) {
            console.error('Error querying the customer: ' + err.message);
            return res.status(500).json({ error: 'Internal server error' });
        }

        if (results.length === 0) {
            // Customer doesn't exist, so insert them into the customers table 

            db.query('INSERT INTO customer (name, number, address) VALUES (?, ?, ?)',
                [customer_details.name, customerNumber, customer_details.address], (err, results) => {

                    if (err) {
                        console.error('Error inserting customer: ' + err.message);
                        return res.status(500).json({ error: 'Internal server error' });
                    }

                    const cust_id = results.insertId;

                    // Insert order details with the cust_id
                    insertFutureOrderDetails(res, cust_id, order_details);
                });
        } else {
            // Customer already exists, insert order details directly
            const cust_id = results[0].cust_id;
            insertFutureOrderDetails(res, cust_id, order_details);
        }
    });
});

// above future order form submission function
/*function insertFutureOrderDetails(res, cust_id, order_details) {
    const products = order_details.products;

    //  const prod_id = order_details.prod_id;
    // const generatedInvoiceNumber = generateInvoiceNumber();
    // console.log(order_details);

    for (const product of products) {
        // const prod_id = product.prod_id;
        const prod_id = product.selectedProduct.id; // Use the selected product's ID
        console.log(prod_id);

        db.query('INSERT INTO order_detail (cust_id, prod_id, date, invoice, shipping_charge, location, delivery_preference ,payment_mode, amount, total_amount, grand_total) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)',
            [
                cust_id,
                prod_id,
                order_details.date,
                // generatedInvoiceNumber,
                order_details.invoice,
                order_details.shipping_charge,
                order_details.location,
                order_details.delivery_preference,
                order_details.payment_mode,
                order_details.amount,
                order_details.total_amount,
                order_details.grand_total,
            ],
            (err, results) => {
                if (err) {
                    console.error('Error inserting order details: ' + err.message);
                    return res.status(500).json({ error: 'Internal server error' });
                }

                const autoGeneratedOrderId = results.insertId;
                const formattedOrderId = 'FUT_' + autoGeneratedOrderId;

                // Update the order_detail table with the formatted_order_id
                db.query('UPDATE order_detail SET formatted_order_id = ? WHERE order_id = ?',
                    [formattedOrderId, autoGeneratedOrderId],
                    (err) => {
                        if (err) {
                            console.error('Error updating formatted_order_id: ' + err.message);
                            return res.status(500).json({ error: 'Internal server error' });
                        }

                        // Insert into order_summary table for each product
                        const orderSummaryValues = products.map((product) => [
                            autoGeneratedOrderId, // order_id
                            product.selectedProduct.id,
                            product.quantity ?? 1, // Use 1 as the default quantity if not provided
                            product.discount ?? 0, // Use 0 as the default discount if not provided
                        ]);

                        db.query('INSERT INTO order_summary (order_id, prod_id, quantity, discount) VALUES (?, ?, ?, ?)',
                            [orderSummaryValues],
                            (err) => {
                                if (err) {
                                    console.error('Error inserting into order_summary: ' + err.message);
                                    return res.status(500).json({ error: 'Internal server error' });
                                }
                                // const invoiceNumber = generatedInvoiceNumber;  // Use the same generated invoice number
                                res.json({ message: 'Order created successfully', order_id: autoGeneratedOrderId, invoice: order_details.invoice });
                            });
                    });
            });
    }

} */

// Future order form submission function
/*function insertFutureOrderDetails(res, cust_id, order_details) {
   const products = order_details.products;
   let autoGeneratedOrderId; // Define the variable here

   // Create an array to store values for bulk insert into order_summary
   const orderSummaryValues = [];

   for (const product of products) {
       const prod_id = product.selectedProduct.id; // Use the selected product's ID

       db.query('INSERT INTO order_detail (cust_id, prod_id, date, invoice, shipping_charge, location, delivery_preference, payment_mode, amount, total_amount, grand_total) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)',
           [
               cust_id,
               prod_id,
               order_details.date,
               order_details.invoice,
               order_details.shipping_charge,
               order_details.location,
               order_details.delivery_preference,
               order_details.payment_mode,
               order_details.amount,
               order_details.total_amount,
               order_details.grand_total,
           ],
           (err, results) => {
               if (err) {
                   console.error('Error inserting order details: ' + err.message);
                   return res.status(500).json({ error: 'Internal server error' });
               }

               autoGeneratedOrderId = results.insertId; // Assign the value here
               const formattedOrderId = 'FUT_' + autoGeneratedOrderId;

               // Update the order_detail table with the formatted_order_id
               db.query('UPDATE order_detail SET formatted_order_id = ? WHERE order_id = ?',
                   [formattedOrderId, autoGeneratedOrderId],
                   (err) => {
                       if (err) {
                           console.error('Error updating formatted_order_id: ' + err.message);
                           return res.status(500).json({ error: 'Internal server error' });
                       }

                       // Push values to the orderSummaryValues array for bulk insert into order_summary
                       orderSummaryValues.push([
                           autoGeneratedOrderId, // order_id
                           prod_id,
                           product.quantity.id ?? 1,
                           product.discount ?? 0,
                       ]);

                       // Check if this is the last product in the loop
                       if (orderSummaryValues.length === products.length) {
                           // Insert into order_summary table for all products
                           db.query('INSERT INTO order_summary (order_id, prod_id, quantity, discount) VALUES ?',
                               [orderSummaryValues],
                               (err) => {
                                   if (err) {
                                       console.error('Error inserting into order_summary: ' + err.message);
                                       return res.status(500).json({ error: 'Internal server error' });
                                   }

                                   // Send the response once all queries are completed
                                   res.json({
                                       message: 'Order created successfully',
                                       order_id: autoGeneratedOrderId,
                                       invoice: order_details.invoice
                                   });
                               });
                       }
                   });
           });
   }
}
*/

// Future order form submission function
function insertFutureOrderDetails(res, cust_id, order_details) {
    const products = order_details.products;

    // Create an array to store values for bulk insert into order_summary
    const orderSummaryValues = [];

    // Function to insert order details and order summary for a product
    function insertOrderDetails(product, callback) {
        const prod_id = product.selectedProduct.id; // Use the selected product's ID

        // Insert into order_detail table
        db.query('INSERT INTO order_detail (cust_id, prod_id, date, invoice, shipping_charge, location, delivery_preference, payment_mode, amount, total_amount, grand_total) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)',
            [
                cust_id,
                prod_id,
                order_details.date,
                order_details.invoice,
                order_details.shipping_charge,
                order_details.location,
                order_details.delivery_preference,
                order_details.payment_mode,
                order_details.amount,
                order_details.total_amount,
                order_details.grand_total,
            ],
            (err, results) => {
                if (err) {
                    console.error('Error inserting order details: ' + err.message);
                    return res.status(500).json({ error: 'Internal server error' });
                }

                const autoGeneratedOrderId = results.insertId; // Assign the value here
                const formattedOrderId = 'FUT_' + autoGeneratedOrderId;

                // Update the order_detail table with the formatted_order_id
                db.query('UPDATE order_detail SET formatted_order_id = ? WHERE order_id = ?',
                    [formattedOrderId, autoGeneratedOrderId],
                    (err) => {
                        if (err) {
                            console.error('Error updating formatted_order_id: ' + err.message);
                            return res.status(500).json({ error: 'Internal server error' });
                        }

                        // Push values to the orderSummaryValues array for bulk insert into order_summary
                        orderSummaryValues.push([
                            autoGeneratedOrderId, // order_id
                            prod_id,
                            product.quantity.id ?? 1,
                            product.discount ?? 0,
                        ]);

                        // Call the callback to indicate that the operation is complete
                        callback();
                    });
            });
    }

    // Counter to keep track of how many products have been processed
    let productsProcessed = 0;

    // Function to handle the completion of the loop
    function checkCompletion() {
        productsProcessed++;

        // Check if all products have been processed
        if (productsProcessed === products.length) {
            // Insert into order_summary table for all products
            db.query('INSERT INTO order_summary (order_id, prod_id, quantity, discount) VALUES ?',
                [orderSummaryValues],
                (err) => {
                    if (err) {
                        console.error('Error inserting into order_summary: ' + err.message);
                        return res.status(500).json({ error: 'Internal server error' });
                    }

                    // Send the response once all queries are completed
                    res.json({
                        message: 'Order created successfully',
                        order_id: orderSummaryValues[0][0], // Use the order_id from the first product
                        invoice: order_details.invoice
                    });
                });
        }
    }

    // Loop through each product and call insertOrderDetails
    products.forEach((product) => insertOrderDetails(product, checkCompletion));
}

module.exports = router;