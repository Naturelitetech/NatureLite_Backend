const express = require('express');
const router = express.Router();
const db = require('../../config/db');

// immediate order form submit 
router.post('/create_order_immediate', (req, res) => {

    const customer_details = req.body.customer;
    const order_details = req.body.order;

    // Check if the customer already exists 
    db.query('SELECT cust_id FROM customer WHERE number = ? LIMIT 1', [customer_details.number], (err, results) => {

        if (err) {
            console.error('Error querying the customer: ' + err.message);
            return res.status(500).json({ error: 'Internal server error' });
        }

        if (results.length === 0) {
            // Customer doesn't exist, so insert them into the customers table 
            db.query('INSERT INTO customer (name, number, address) VALUES (?, ?, ?)',
                [customer_details.name, customer_details.number, customer_details.address], (err, results) => {

                    if (err) {
                        console.error('Error inserting customer: ' + err.message);
                        return res.status(500).json({ error: 'Internal server error' });
                    }

                    const cust_id = results.insertId;

                    // Insert order details with the cust_id
                    insertImmediateOrderDetails(res, cust_id, order_details);
                });
        } else {
            // Customer already exists, insert order details directly
            const cust_id = results[0].cust_id;
            insertImmediateOrderDetails(res, cust_id, order_details);
        }
    });
});

// above immediate order form submission function
function insertImmediateOrderDetails(res, cust_id, order_details) {

    const prod_id = order_details.prod_id;
    db.query('INSERT INTO order_detail (cust_id, prod_id, date, invoice, shipping_charge, location, payment_mode, amount, total_amount, grand_total) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)',
        [
            cust_id,
            //order_details.prod_id,
            prod_id,
            order_details.date,
            order_details.invoice,
            order_details.shipping_charge,
            order_details.location,
            order_details.payment_mode,
            order_details.amount,
            order_details.total_amount,
            order_details.grand_total,
        ],
        (err, results) => {
            if (err) {
                console.error('Error inserting order details: ' + err.message);
                return res.status(500).json({ error: 'Internal server error' });
            }

            const autoGeneratedOrderId = results.insertId;
            const formattedOrderId = 'IMM_' + autoGeneratedOrderId;

            // Update the order_detail table with the formatted_order_id
            db.query('UPDATE order_detail SET formatted_order_id = ? WHERE order_id = ?',
                [formattedOrderId, autoGeneratedOrderId],
                (err) => {
                    if (err) {
                        console.error('Error updating formatted_order_id: ' + err.message);
                        return res.status(500).json({ error: 'Internal server error' });
                    }

                    // Insert into order_summary table
                    const orderSummaryValues = [
                        autoGeneratedOrderId, // order_id
                        prod_id,
                        order_details.quantity || 1, // Use 1 as the default quantity if not provided
                        order_details.discount || 0, // Use 0 as the default discount if not provided
                    ];

                    db.query('INSERT INTO order_summary (order_id, prod_id, quantity, discount) VALUES (?, ?, ?, ?)',
                        orderSummaryValues,
                        (err) => {
                            if (err) {
                                console.error('Error inserting into order_summary: ' + err.message);
                                return res.status(500).json({ error: 'Internal server error' });
                            }

                            res.json({ message: 'Order created successfully', order_id: autoGeneratedOrderId });
                        });
                });
        }
    );
}

module.exports = router;
